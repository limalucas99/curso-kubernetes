apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-board
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: full-acess-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kube-board-rolebingind-default
  namespace: default
subjects:
  - kind: ServiceAccount
    name: kube-board
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: full-acess
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: full-acess
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-board-rolebingind
subjects:
  - kind: ServiceAccount
    name: kube-board
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: full-acess
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-board
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-board
  template:
    metadata:
      labels:
        app: kube-board
    spec:
      serviceAccountName: kube-board
      containers:
        - name: kube-board
          image: fabricioveronez/kube-board
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 3000
---
# service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kube-board
spec:
  selector:
    app: kube-board
  ports:
    - port: 80
      nodePort: 30000
      targetPort: 3000
  type: NodePort
